package com.gidoc.pdf;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.text.PDFTextStripperByArea;
import org.apache.pdfbox.tools.imageio.ImageIOUtil;

import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.awt.image.BufferedImage;
import java.awt.Rectangle;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import lombok.AllArgsConstructor;
import lombok.Data; 
import lombok.NoArgsConstructor;

import java.io.*;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.XML;

import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import javax.xml.bind.*;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
/******************************************************/
@RestController
@RequestMapping("/pdf")
public class PdfTextRectangleExtractor {
    
    int key;
    String jsonStr;
    String zone;
 
    @RequestMapping("/addmodel")
    public static void addModel(@RequestBody List<Zone> jsonData) throws JAXBException{  
   // public static void addModel(@RequestBody ArrayList<JSONObject> rect)  {  
        String filePath = "C:/Users/SIDO/Desktop/out/output22.xml";
        //System.out.println(jsonData);
        // Traitement des données JSON reçues depuis Angular
/*       for (Zone zon : jsonData) {
        // Do something with the name and age values
        System.out.print(" zone: " + zon.getzone());
        System.out.print(" p: " + zon.getp());
        System.out.print(" x: " + zon.getx());
        System.out.print(" y: " + zon.gety());
        System.out.print(" w: " + zon.getw());
        System.out.print(" h: " + zon.geth());
        System.out.println("\n");
    } */
            
            
    // Create a JAXB context and marshaller
/*     JAXBContext jaxbContext = JAXBContext.newInstance(Zone.class);
    Marshaller marshaller = jaxbContext.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
    StringWriter stringWriter = new StringWriter();
    marshaller.marshal(jsonData, stringWriter); 
    String xmlContent = stringWriter.toString();
    System.out.println(xmlContent); */
    
    System.out.println(jsonData);
    // Create a JAXB context
   // JAXBContext jaxbContext = JAXBContext.newInstance(Zone.class);
   // Marshaller marshaller = jaxbContext.createMarshaller();
   // marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
   // File outputFile = new File(filePath); 
   // marshaller.marshal(jsonData, outputFile);

   /* JAXBContext jaxbContext = JAXBContext.newInstance(ZoneList.class);
    Marshaller marshaller = jaxbContext.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
    File file = new File(filePath);
    marshaller.marshal(jsonData, file);  */






    /*     for (Map<String, Object> item : jsonData) {
            String x = (String) item.get("x");
            String y = (String) item.get("y");
            String h = (String) item.get("h");
            String p = (String) item.get("p");
            String zone = (String) item.get("zone");
            // Faites quelque chose avec les valeurs name et age
            System.out.println("x : " + x + ", zone : " + zone);
            System.out.println("y : " + y + ", h : " + h);
        }
 */
       /*    try {
          //  String jsonString = new String(rect);    
        // Convert ArrayList to JSONArray
        JSONArray jsonArray = new JSONArray(rect);
        // Get the JSON string
        String jsonString = jsonArray.toString();       
            // Convert JSON string to JSONObject
            JSONObject jsonObject = new JSONObject(jsonString);
            // Convert JSONObject to XML string
            String xmlString = XML.toString(jsonObject);
            // Write XML string to file
            Files.write(Paths.get(filePath), xmlString.getBytes());
            System.out.println("XML file generated successfully.");
        } catch (Exception e) {
            e.printStackTrace();
        } */ 
        
        
       /*  String xmlString = convertToXML(rect);
        System.out.print(xmlString); 
        // Write the XML to a file
        String filePath = "C:/Users/SIDO/Desktop/out/output.xml";
        try (FileWriter fileWriter = new FileWriter(filePath)) {
            fileWriter.write(xmlString);
            System.out.println("XML file exported successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        } */
    }
    
    /*  public static String convertToXML(ArrayList<JSONObject> jsonObjectList) {
        try {
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            // Create a new XML document
            Document doc = docBuilder.newDocument();
            // Create the root element
            Element rootElement = doc.createElement("Model_facture");
            doc.appendChild(rootElement);
            // Iterate through the JSONObjects and convert each to XML
            for (JSONObject jsonObject : jsonObjectList) {
                Element listItemElement = doc.createElement("Rectangle");
                // Iterate through the keys of the JSONObject
                for (String key : jsonObject.keySet()) {
                    Object value = jsonObject.get(key);
                    Element keyElement = doc.createElement(key);
                    keyElement.appendChild(doc.createTextNode(value.toString()));
                    listItemElement.appendChild(keyElement);
                }
                rootElement.appendChild(listItemElement);
            }
            // Format the XML with indentation
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

            // Remove standalone attribute declaration from the XML declaration
            transformer.setOutputProperty(OutputKeys.STANDALONE, "yes");
            // Create a source from the XML document
            DOMSource source = new DOMSource(doc);
            // Create a stream result to hold the formatted XML
            StringWriter writer = new StringWriter();
            StreamResult result = new StreamResult(writer);
            // Transform the source XML into the stream result
            transformer.transform(source, result);
            return writer.toString();
        } catch (ParserConfigurationException | TransformerException e) {
            e.printStackTrace();
        }
        return null;
    }
 */
  
   @RequestMapping("/pathExtraction")
    public String extract_path_model(@RequestBody String path) throws IOException {      

        String outPdfFile = "C:/Users/SIDO/Desktop/out/pdf_image.pdf";
        String _path = "C:/Users/SIDO/Desktop/pdftest";
        String xml = "C:/Users/SIDO/Desktop/out/output.xml";
        String imgCropped = "C:/Users/SIDO/Desktop/out/imgCropped.jpg";
        //JSONArray jsonArray = new JSONArray();
        key=0; jsonStr="";
        
        try {
            String xmlString = new String(Files.readAllBytes(Paths.get(xml)));
            
            // Convert XML string to JSONObject
           // JSONObject jsonObject = XML.toJSONObject(xmlString);
            
            // Convert JSONObject to JSON string with indentation
            String jsonString = jsonObject.toString(4);
            
            System.out.println(jsonString);
        } catch (Exception e) {
            e.printStackTrace();
        }

      /* try {
            File xmlFile = new File(xml);           
            // Create a DocumentBuilder
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();       
            // Parse the XML file to obtain a Document object
            Document document = builder.parse(xmlFile);             
            // Get the root element of the XML document
            Node root = document.getDocumentElement();          
            // Traverse child nodes
            traverseNode(root);
            
        } catch (Exception e) {
            e.printStackTrace();
        } */

/*            try {
            // Create a new DocumentBuilderFactory
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            // Create a new DocumentBuilder
            DocumentBuilder builder = factory.newDocumentBuilder();
            // Parse the XML file
            Document document = builder.parse(xml);
            // Get the root element of the XML file
            Element rootElement = document.getDocumentElement();
            System.out.println("rootElement: " + rootElement );
            // Get all child nodes of the root element
            NodeList nodeList = rootElement.getChildNodes();
            System.out.println("nodeList: " + nodeList );
            // Iterate over the child nodes
            for (int i = 0; i < nodeList.getLength(); i++) {
                // Get the current node
                org.w3c.dom.Node node = nodeList.item(i);
                System.out.println("node: " + node );
                // Check if the node is an element node
                if (node.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {
                    // Cast the node to an Element
                    Element element = (Element) node;
                    System.out.println("element: " + element );
                    // Get the key and value from the element
                    String key = element.getTagName();
                    String value = element.getTextContent();
                    // Print the key-value pair
                    System.out.println("Key: " + key + ", Value: " + value);
                    //System.out.println("Key: " + key.valueOf(0) + ", Value: " + value);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } */


        /**************************** */
          
      /*  rect.forEach(reko -> {
        try {    key++;  zone="";
             PDDocument doc = PDDocument.load(new File(pdfFile));    
             int p =  reko.getInt("p"); 
             float x =  reko.getInt("x"); 
             float w = reko.getInt("w");
             float yy = reko.getInt("y");
             float h = reko.getInt("h");
             zone = reko.getString("zone");
             PDPage page = doc.getPage(p);
             float height =  page.getCropBox().getHeight(); 
             float y = (height - yy) - h;

              System.out.println(p);
              System.out.println(x);
              System.out.println(y);
              System.out.println(w);
              System.out.println(h);
              System.out.println(zone);

             page.setCropBox(new PDRectangle(x, y, w, h));

             PDFRenderer renderer = new PDFRenderer(doc);
             BufferedImage img = renderer.renderImage(p, 4f);
             ImageIOUtil.writeImage(img, new File(outFolderFile, "imgCropped.jpg").getAbsolutePath(), 100);

             //doc.save(outPdfFile);
             doc.close();
        } catch (IOException e) {
           JSONObject jsonObject1 = new JSONObject();
             jsonObject1.put("zone", zone);
             jsonObject1.put("Text", "Erreur dokument "+ e.toString());
             jsonArray.put(jsonObject1); 
        } 
             

        try {
             ITesseract tesseract = new Tesseract();
             tesseract.setTessVariable("user_defined_dpi", "72");
             tesseract.setDatapath("C:/Users/SIDO/Desktop/pdf/src/main/resources/tessdata"); // Set the path to the tessdata directory
             String extractedText =  tesseract.doOCR(new File(outFolderFile, "imgCropped.jpg")) ;
             //String extractedText =  tesseract.doOCR(new File(outPdfFile)) ;
             JSONObject jsonObject1 = new JSONObject();
             jsonObject1.put("zone", zone);
             jsonObject1.put("Text", extractedText);
             jsonArray.put(jsonObject1); 
        } catch (TesseractException e) {
             JSONObject jsonObject1 = new JSONObject();
             jsonObject1.put("zone", key);
             jsonObject1.put("Text", "Erreur Tessrakt "+ e.toString());
             jsonArray.put(jsonObject1); 
        }        
   
    });
     */
    
    String jsonStr = "Textoooooooooooooooooooooooooooo";
    // String jsonStr = jsonArray.toString();
    System.out.println(jsonStr);
   
   return  jsonStr;
}

/*     private static void traverseNode(Node node) {
        if (node.getNodeType() == Node.ELEMENT_NODE) {
            String name = node.getNodeName();
            String value = node.getTextContent();
            
            System.out.println("Name=: " + name);
            System.out.println("Value=: " + value);
        }
         
        NodeList childNodes = node.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            Node childNode = childNodes.item(i);
            traverseNode(childNode);
        }
    } */





















    /************************************ */


    @RequestMapping("/extraction")
    public String extractRectangleTextFromPdf(@RequestBody ArrayList<JSONObject> rect) throws IOException {
        
        String pdfFile = "C:/Users/SIDO/Desktop/pdftest/ABDELLI-WALIB.pdf";
        //String pdfFile = "C:/Users/SIDO/Desktop/pdf_image.pdf";
        String outPdfFile = "C:/Users/SIDO/Desktop/out/pdf_image.pdf";
        String outFolderFile = "C:/Users/SIDO/Desktop/out/";
        String imgCropped = "C:/Users/SIDO/Desktop/out/imgCropped.jpg";
        /******************************************************* */
        JSONArray jsonArray = new JSONArray();
        key=0; jsonStr="";
          
       rect.forEach(reko -> {
        try {    key++;  zone="";
             PDDocument doc = PDDocument.load(new File(pdfFile));    
             int p =  reko.getInt("p"); 
             float x =  reko.getInt("x"); 
             float w = reko.getInt("w");
             float yy = reko.getInt("y");
             float h = reko.getInt("h");
             zone = reko.getString("zone");
             PDPage page = doc.getPage(p);
             float height =  page.getCropBox().getHeight(); 
             float y = (height - yy) - h;

              System.out.println(p);
              System.out.println(x);
              System.out.println(y);
              System.out.println(w);
              System.out.println(h);
              System.out.println(zone);

             page.setCropBox(new PDRectangle(x, y, w, h));

             PDFRenderer renderer = new PDFRenderer(doc);
             BufferedImage img = renderer.renderImage(p, 4f);
             ImageIOUtil.writeImage(img, new File(outFolderFile, "imgCropped.jpg").getAbsolutePath(), 100);

             //doc.save(outPdfFile);
             doc.close();
        } catch (IOException e) {
           JSONObject jsonObject1 = new JSONObject();
             jsonObject1.put("zone", zone);
             jsonObject1.put("Text", "Erreur dokument "+ e.toString());
             jsonArray.put(jsonObject1); 
        } 
             
              /*   // Preprocess the image to improve OCR accuracy
                String preprocessedImagePath = preprocessImage(imgCropped );

                // Extract text from the preprocessed image
                String Text = extractText(preprocessedImagePath);

                System.out.println("Extracted Text: " + Text); */

/*         try {
             ITesseract tesseract = new Tesseract();
             tesseract.setTessVariable("user_defined_dpi", "72");
             tesseract.setDatapath("C:/Users/SIDO/Desktop/pdf/src/main/resources/tessdata"); // Set the path to the tessdata directory
             String extractedText =  tesseract.doOCR(new File(outFolderFile, "imgCropped.jpg")) ;
             //String extractedText =  tesseract.doOCR(new File(outPdfFile)) ;
             JSONObject jsonObject1 = new JSONObject();
             jsonObject1.put("zone", zone);
             jsonObject1.put("Text", extractedText);
             jsonArray.put(jsonObject1); 
        } catch (TesseractException e) {
             JSONObject jsonObject1 = new JSONObject();
             jsonObject1.put("zone", key);
             jsonObject1.put("Text", "Erreur Tessrakt "+ e.toString());
             jsonArray.put(jsonObject1); 
        }        
   */
    });
    
    String jsonStr = "Textoooooooooooooooooooooooooooo";
   // String jsonStr = jsonArray.toString();
    System.out.println(jsonStr);
   
   return  jsonStr;
}
   
    /************************************************************************ */

    @RequestMapping("/extraction2")
    public MyData getData(@RequestBody PdfRect rect) {
    //public MyData getData() {
    //public static String main() {
        String filePath = "C:/Users/SIDO/Desktop/pdf_image.pdf";
        //System.out.println("ree ====== " + rect.x);
        //{"x":262,"y":97,"w":88,"h":19,"page":1}
        try {
            PDDocument document = PDDocument.load(new File(filePath));
            PDFTextStripperByArea stripper = new PDFTextStripperByArea();

            // Define the rectangle coordinates (in points)
           // Rectangle rectangle = new Rectangle(262, 97, 88, 19);
            Rectangle rectangle = new Rectangle(rect.x, rect.y, rect.w, rect.h);
            stripper.addRegion("customRegion", rectangle);
            
            // Get the text from the specified rectangle
            //PDPage pdfPage = document.getPage(rect.page);
            PDPage pdfPage = document.getPage(0);

            PDRectangle mediaBox = pdfPage.getMediaBox();
            //Width: 612.0 points //Height: 792.0 points
            float width = mediaBox.getWidth();
            float height = mediaBox.getHeight();

            stripper.extractRegions(pdfPage);
            String textInRectangle = stripper.getTextForRegion("customRegion");

            System.out.println("Text in rectangle == ");
            System.out.println(textInRectangle);

            MyData data = new MyData("textextract", textInRectangle);
            
            document.close();
            return data;
            
        } catch (IOException e) {
            e.printStackTrace();
            return new MyData("error", e.toString()) ;
        }
    }

/*
    private static String preprocessImage(String imagePath) {
        // Load the input image
        Mat image = Imgcodecs.imread(imagePath);

        // Convert the image to grayscale
        Mat grayscaleImage = new Mat();
        Imgproc.cvtColor(image, grayscaleImage, Imgproc.COLOR_BGR2GRAY);

        // Apply adaptive thresholding to improve text extraction
        Mat thresholdImage = new Mat();
        Imgproc.adaptiveThreshold(
                grayscaleImage,
                thresholdImage,
                255,
                Imgproc.ADAPTIVE_THRESH_MEAN_C,
                Imgproc.THRESH_BINARY,
                15,
                10
        );

        // Save the preprocessed image to a temporary file
        String preprocessedImagePath = "C:/Users/SIDO/Desktop/out/preprocessed_image.jpg";
        Imgcodecs.imwrite(preprocessedImagePath, thresholdImage);

        return preprocessedImagePath;
    }

    private static String extractText(String imagePath) {
        // Load the preprocessed image
        Mat image = Imgcodecs.imread(imagePath);

        // Create a Tesseract instance
        net.sourceforge.tess4j.Tesseract tesseract = new net.sourceforge.tess4j.Tesseract();
        
        //tesseract.setTessVariable("user_defined_dpi", "72");

        // Set the path to the Tesseract data directory
        tesseract.setDatapath("C:/Users/SIDO/Desktop/pdf/src/main/resources/tessdata"); 
        
        // Set the language for text recognition (e.g., "eng" for English)
        tesseract.setLanguage("eng");

        try {
            // Perform OCR on the image
            String extractedText = tesseract.doOCR(new File(imagePath));
            return extractedText.trim();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }
*/



}
 












/*
 
    @RequestMapping("/extraction")
    public String extractRectangleTextFromPdf(@RequestBody ArrayList<JSONObject> rect) throws IOException {
        
        String pdfFile = "C:/Users/SIDO/Desktop/pdftest/ABDELLI-WALIB.pdf";
        //String pdfFile = "C:/Users/SIDO/Desktop/pdf_image.pdf";
        String outPdfFile = "C:/Users/SIDO/Desktop/out/pdf_image.pdf";
        String outFolderFile = "C:/Users/SIDO/Desktop/out/";
        String imgCropped = "C:/Users/SIDO/Desktop/out/imgCropped.jpg";
        
        JSONArray jsonArray = new JSONArray();
        key=0; jsonStr="";
          
       rect.forEach(reko -> {
        try {    key++;  zone="";
             PDDocument doc = PDDocument.load(new File(pdfFile));    
             int p =  reko.getInt("p"); 
             float x =  reko.getInt("x"); 
             float w = reko.getInt("w");
             float yy = reko.getInt("y");
             float h = reko.getInt("h");
             zone = reko.getString("zone");
             PDPage page = doc.getPage(p);
             float height =  page.getCropBox().getHeight(); 
             float y = (height - yy) - h;

              System.out.println(p);
              System.out.println(x);
              System.out.println(y);
              System.out.println(w);
              System.out.println(h);
              System.out.println(zone);

             page.setCropBox(new PDRectangle(x, y, w, h));

             PDFRenderer renderer = new PDFRenderer(doc);
             BufferedImage img = renderer.renderImage(p, 4f);
             ImageIOUtil.writeImage(img, new File(outFolderFile, "imgCropped.jpg").getAbsolutePath(), 100);

             //doc.save(outPdfFile);
             doc.close();
        } catch (IOException e) {
           JSONObject jsonObject1 = new JSONObject();
             jsonObject1.put("zone", zone);
             jsonObject1.put("Text", "Erreur dokument "+ e.toString());
             jsonArray.put(jsonObject1); 
        } 
             
                // Preprocess the image to improve OCR accuracy
                String preprocessedImagePath = preprocessImage(imgCropped );

                // Extract text from the preprocessed image
                String Text = extractText(preprocessedImagePath);

                System.out.println("Extracted Text: " + Text);

         try {
             ITesseract tesseract = new Tesseract();
             tesseract.setTessVariable("user_defined_dpi", "72");
             tesseract.setDatapath("C:/Users/SIDO/Desktop/pdf/src/main/resources/tessdata"); // Set the path to the tessdata directory
             String extractedText =  tesseract.doOCR(new File(outFolderFile, "imgCropped.jpg")) ;
             //String extractedText =  tesseract.doOCR(new File(outPdfFile)) ;
             JSONObject jsonObject1 = new JSONObject();
             jsonObject1.put("zone", zone);
             jsonObject1.put("Text", extractedText);
             jsonArray.put(jsonObject1); 
        } catch (TesseractException e) {
             JSONObject jsonObject1 = new JSONObject();
             jsonObject1.put("zone", key);
             jsonObject1.put("Text", "Erreur Tessrakt "+ e.toString());
             jsonArray.put(jsonObject1); 
        }        
    });
    
    String jsonStr = "Textoooooooooooooooooooooooooooo";
   // String jsonStr = jsonArray.toString();
    System.out.println(jsonStr);
   
   return  jsonStr;
}
   

 */
















/******************************************************************************* */
/******************************************************************************* */
/******************************************************************************* */
/******************************************************************************* */
/******************************************************************************* */
/******************************************************************************* */
@Data
@AllArgsConstructor
@NoArgsConstructor
@XmlRootElement 
class Zone {
    private String zone;
    private int p;
    private int x;
    private int y;
    private int w;
    private int h;

 /*    public Zone() {}
    public Zone(String zone, int p , int x, int y, int w, int h) {
        super();
        this.zone = zone;
        this.p = p;
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
    }
  
    public String getzone() { return zone; }
    public void setzone(String zone) { this.zone=zone; }
  
    public int getp() { return p; }
    public void setp(int p) { this.p=p; }
    
    public int getx() { return x; }
    public void setx(int x) {  this.x=x; }
   
    public int gety() { return y; }
    public void sety(int y) {  this.y=y; }
   
    public int getw() { return w; }
    public void setw(int w) {  this.w=w; }
 
    public int geth() { return h; }
    public void seth(int h) { this.h=h; }
 */
}

@Data
@AllArgsConstructor
@NoArgsConstructor
@XmlRootElement(name = "zoneList")
@XmlAccessorType(XmlAccessType.FIELD)
class ZoneList {

   @XmlElement 
   List<Zone> zones;
 /*    private List<Zone> zoneList;

    public ListZone() {
        zoneList =  new ArrayList<Zone>();
    }

    public ListZone(List<Zone> zoneList) {
        this.zoneList = zoneList;
    }

    @XmlElement(name = "zone")
    public List<Zone> getZoneList() {
        return zoneList;
    }

    public void setZoneList(List<Zone> zoneList) {
        this.zoneList = zoneList;
    }
    public void add(Zone z) {
        this.zoneList.add(z);
    } */
}




























class myRectangle2 {
    public ArrayList<Object> rectangle;

    public myRectangle2() {
        rectangle = new ArrayList<>();
    }

    public void forEachh() {
        rectangle.forEach((e) -> {
             System.out.print(e);
        });
    }

    public ArrayList<Object> getRectangle() {
        return rectangle;
    }

}

 class PdfRect {
    public int x;
    public int y;
    public int w;
    public int h;
    public int page;
}

class MyData {
    private String rect;
    private String text;
  
    public MyData(String rect, String text) {
        this.rect = rect;
        this.text = text;
    }
  
    public String getRect() {
        return rect;
    }
  
    public void setRect(String rect) {
        this.rect = rect;
    }
  
    public String gettext() {
        return text;
    }
  
    public void setText(String text) {
        this.text = text;
    }
  }

class myRect {

    public int x;
    public int y;
    public int w;
    public int h;
    public int p;
    
    public myRect(int x,int y,int w,int h,int p) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
        this.p = p;
    }
    
    public int getx() { return x; }
    public int gety() { return y; }
    public int getw() { return w; }
    public int geth() { return h; }
    public int getp() { return p; }

}





  /* 
    @RequestMapping("/extraction2")
    public MyData extractRectangleTextFromPdf(){//@RequestBody PdfRect rect) {
        String filePath = "C:/Users/SIDO/Desktop/pdf_image.pdf";
        try {
            File pdfFile = ResourceUtils.getFile(filePath); // Replace with your PDF file path

            PDDocument document = PDDocument.load(pdfFile);
            PDFRenderer pdfRenderer = new PDFRenderer(document);

            int pageNum = 0; // Page number from which you want to extract the text

            BufferedImage image = pdfRenderer.renderImageWithDPI(pageNum, 300); // Render the page as an image
            document.close();

            // Obtain the page from the document
            PDPage page = document.getPage(pageNum);

          //  System.out.println(rect);

             // Define the rectangle coordinates (replace with your own values)
             float x = 100;
             float y = 200;
             float width = 200;
             float height = 100;
 
 
            // Apply OCR to extract text from the cropped image using Tesseract OCR
            ITesseract tesseract = new Tesseract();
            tesseract.setDatapath("C:/Users/SIDO/Desktop/pdf/src/main/resources/tessdata"); // Set the path to the tessdata directory

            String extractedText = tesseract.doOCR(new File("C:/Users/SIDO/Desktop/pdf/src/main/resources/tessdata/image.png"));
            //String extractedText = tesseract.doOCR(croppedImage);
            System.out.println(extractedText);

            MyData data = new MyData("textextract", extractedText);

            // Return the extracted text
            return  data;
        } catch (IOException e) {
            e.printStackTrace();
           // return "Error occurred during text extraction.";
            return new MyData("error IOException", e.toString()) ;
        } catch (TesseractException e) {
            e.printStackTrace();
           // return "Error occurred during OCR text extraction.";
            return new MyData("error OCR", e.toString()) ;
        }
    }

 */
